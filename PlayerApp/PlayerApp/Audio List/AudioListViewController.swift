//
//  AudioListViewController.swift
//  PlayerApp
//
//  Created by Abhishek Chatterjee on 23/02/18.
//  Copyright (c) 2018 Abhishek Chatterjee. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import AVFoundation
import MediaPlayer

protocol AudioListDisplayLogic: class {
    func displayFetchedAudios(viewModel: Audios)
}

class AudioListViewController: UIViewController, AudioListDisplayLogic, UITableViewDataSource, UITableViewDelegate {

    func play() {

    }

    var player:AVPlayer?
    var item: Audios = Audios(items: [])
    var selectedCell: AudioListTableViewCell?

    @IBOutlet var tableView: UITableView!

    var interactor: AudioListBusinessLogic?
    var router: (NSObjectProtocol & AudioListRoutingLogic & AudioListDataPassing)?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = AudioListInteractor()
        let presenter = AudioListPresenter()
        let router = AudioListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        fetchAllAudios()
    }

    // MARK: Fetch Audio List
    func fetchAllAudios() {
        interactor?.fetchAudioList()
    }

    func displayFetchedAudios(viewModel: Audios) {
        self.item = viewModel
        DispatchQueue.main.async {
            self.tableView.reloadData()
        }
    }

    // MARK: - UITableViewDataSource

    func numberOfSections(in tableView: UITableView) -> Int {
        return 1;
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.item.items.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell  {
        let cell = tableView.dequeueReusableCell(withIdentifier: "AudioListCell", for: indexPath) as! AudioListTableViewCell

        let audio = self.item.items[indexPath.row]

        cell.songNameLabel?.text = audio.name
        cell.artistNameLabel?.text = audio.author?.name
        cell.urlString = audio.imageLinks?.mediumImageUrl

        return cell
    }

    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 205.0
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {

        let currentCell = tableView.cellForRow(at: indexPath)! as! AudioListTableViewCell
        let playButtonImage = UIImage(named:"Play Button.png")
        self.selectedCell?.playButton.setImage(playButtonImage, for: .normal)

        self.selectedCell = currentCell

        let pauseButtonImage = UIImage(named:"Pause Button.png")

        currentCell.playButton.setImage(pauseButtonImage, for: .normal)

        let audio = self.item.items[indexPath.row]

        player = setupAudioPlayerWithFile(path: audio.audioFileUrl)
        player?.play()
    }

    func setupAudioPlayerWithFile(path:String) -> AVPlayer?  {
        let url = URL(string: path)
        let item = AVPlayerItem(url: url!)
        let audioPlayer:AVPlayer? = AVPlayer(playerItem: item)

        return audioPlayer
    }
}
